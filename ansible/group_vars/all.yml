---
### Vault ###
vaulted_database_name: 'boilerplate'
vaulted_database_user: 'boilerplate'
vaulted_database_password: 'password'


# Git
git_version: 2.9.2


### SWAP ###
swapfile_location: /swapfile
swapfile_use_dd: False
swapfile_size: 4096MB


### Domains ###
site_domain: 'boilerplate.local'
api_domain: 'api.{{ site_domain }}'
flower_domain: 'flower.{{ site_domain }}'
tornado_domain: 'ws.{{ site_domain }}'
docs_domain: 'docs.{{ site_domain }}'

site_protocol: http
ws_protocol: ws


### Options ###
dbservers_internal: yes
skip_checkout: no
force_upgrade: no
cacheservers_internal: yes


### Deploy ###
deploy_app_name: 'boilerplate'
deploy_env: production
deploy_user: '{{ ansible_user_id }}'           # Set deploy user
deploy_group: '{{ deploy_user }}'               # Set deploy group

deploy_prefix: '/home/{{ deploy_user }}'
deploy_dir: '{{ deploy_prefix }}/{{ deploy_app_name }}' # Main directory for deploiment
deploy_etc_dir: '{{ deploy_dir }}/etc'          # Directory where placed configuration files
deploy_log_dir: '{{ deploy_dir }}/log'          # Directory where placed logs
deploy_run_dir: '{{ deploy_dir }}/run'          # Directory where placed unix sockets and pid files
deploy_src_dir: '{{ deploy_dir }}/src'          # Source's directory
deploy_bin_dir: '{{ deploy_dir }}/bin'          # Directory where placed scripts
deploy_dir_skip: []


### Apt ###
apt_enabled: yes  # Enable the role
apt_default_packages: # List of packages which will be installed
  - command-not-found
  - curl
  - htop
  - iftop
  - iotop
  - mercurial
  - nmap
  - pciutils
  - screen
  - sysstat
  - vim
  - wget
  - ack-grep
  - dstat
  - mosh
  - pciutils
  - unzip
  - p7zip-full
apt_packages: # Set list of additional packages which will be installed
  - python-pip
  - build-essential
  - python-dev
  - python-setuptools
  - libcurl4-openssl-dev
  - libffi-dev
  - libssl-dev
  - libpq-dev


### NTP ###
ntp_timezone: UTC


### PostgreSQL ###
postgresql_version: 9.5
postgresql_encoding: 'UTF-8'
postgresql_locale: 'en_US.UTF-8'
postgresql_cluster_name: 'main'

postgresql_admin_user: 'postgres'
postgresql_default_auth_method: 'trust'

postgresql_ext_install_postgis: yes
postgresql_ext_postgis_version: '2.2'

postgresql_listen_addresses:
  - 'localhost'
postgresql_port: 5432

postgresql_databases:
  - name: '{{ vaulted_database_name }}'

postgresql_database_extensions:
  - db: '{{ vaulted_database_name }}'
    extensions:
      - postgis

postgresql_users:
  - name: '{{ vaulted_database_user }}'
    pass: '{{ vaulted_database_password }}'
    encrypted: no # denotes if the password is already encrypted.

postgresql_user_privileges:
  - name: '{{ vaulted_database_user }}'
    db: '{{ vaulted_database_name }}'
    priv: 'ALL'
    role_attr_flags: 'SUPERUSER'


### API Docs ###
docs_host: 127.0.0.1
docs_port: 8082


### Node.JS ###
nodejs_version: "6.x"
nodejs_npm_global_packages:
  - name: npm
    version: 3.10.5
  - name: webpack
  - name: webpack-dev-server
  - name: better-npm-run


### Site ###
api_src_dir: '{{ deploy_src_dir }}/api'
api_repo_branch: ''
api_repo: ''

webapp_src_dir: '{{ deploy_src_dir }}/webapp'
webapp_repo: ''
webapp_repo_branch: ''


### WebApp ###
webapp_host: localhost
webapp_port: 8085


### Django ###
django_dir: '{{ api_src_dir }}'
django_wsgi_file: '{{ django_dir }}/{{ deploy_app_name }}/wsgi.py'
django_settings: '{{ deploy_app_name }}.settings'
django_static_url: '/static'
django_static_root: '{{ django_dir }}/collected_static'
django_local_settings_file: '{{ django_dir }}/local_settings.py'
django_local_settings: "{{ lookup('template', playbook_dir + '/files/local_settings.py.j2') }}"
django_fixtures:
 - '{{ django_dir }}/fixtures/initial_data.json'


### Environment ###
environment_variables:
  DJANGO_SETTINGS_MODULE: '{{ deploy_app_name }}.settings'
  SECRET_KEY: 'super-secure-hash'
  PYTHONHASHSEED: 1234

  DATABASE_HOST: 'localhost'
  DATABASE_PORT: 5432
  DATABASE_NAME: '{{ vaulted_database_name }}'
  DATABASE_USER: '{{ vaulted_database_user }}'
  DATABASE_PASSWORD: '{{ vaulted_database_password }}'

  CACHE_DEFAULT_LOCATION: 'redis://127.0.0.1:6379/1'
  CACHE_CELERY_LOCATION: 'redis://127.0.0.1:6379/2'
  CACHE_CELERY_RESULT_LOCATION: 'redis://127.0.0.1:6379/3'


### PIP ###
pip_requirements:
  - '{{ django_dir }}/requirements.txt'


### Redis ###
redis_user: redis
redis_bind: 127.0.0.1
redis_port: 6379
redis_pidfile: '/var/run/redis/{{ redis_port }}.pid'
redis_logfile: '""'
redis_loglevel: notice
redis_maxmemory: false # Redis memory limit (e.g. 4294967296, 4096mb, 4gb)
redis_timeout: 0


### Virtualenv ###
virtualenv_dir: '{{ deploy_dir }}/venv'


### Python ###
python_versions:
  - 3.5
python_install: []
python_virtualenvs:
  - path: '{{ virtualenv_dir }}'
    python: python3.5


### Tornado ###
tornado_host: 127.0.0.1
tornado_port: 9000


### Celery Flower ###
flower_host: localhost
flower_port: 5555


### Celery ###
celery_enabled: yes # The role is enabled
celery_remove: no # Uninstall the role
celery_user: "{{ deploy_user }}" # User to run celery
celery_group: "{{ deploy_group }}" # Group to run celery
celery_app_name: "{{ deploy_app_name }}" # Application name
celery_app_module: '{{ celery_app_name }}.celery_app:app' # Set to application module
celery_bin: '{{ virtualenv_dir }}/bin/celery' # Celery executable.
celery_concurrency: 1 # Set default concurence level
celery_work_dir: "{{ django_dir }}" # Set to work directory
celery_run_dir: "{{ deploy_run_dir }}/celery" # Set to run directory
celery_beat_dbfile: "{{ celery_run_dir }}/beat-schedule" # Put celery db file here
celery_log_dir: "{{ deploy_log_dir }}/celery" # Set default log directory
celery_log_level: info # Set default log level
celery_log_rotate: yes # Enable log rotation
celery_run:
  - action: worker
    loglevel: info

  - action: beat
    loglevel: info

### Gunicorn ###
# Installation
gunicorn_version: " b"
gunicorn_app_name: "{{ deploy_app_name }}"
gunicorn_config: "{{ deploy_etc_dir }}/{{ gunicorn_app_name }}_gunicorn.py"
gunicorn_virtualenv: "{{ virtualenv_dir }}"
# Running
gunicorn_bind: "unix:{{ deploy_run_dir }}/boilerplate.sock"
gunicorn_workers: 8
gunicorn_wsgi: "{{ django_wsgi_file }}"
gunicorn_reload: false  # reload after each request

# Logging
gunicorn_loglevel: "debug"
gunicorn_accesslog: "{{ deploy_log_dir }}/gunicorn-access.log"
gunicorn_errorlog: "{{ deploy_log_dir }}/gunicorn-error.log"



### NGINX ###
nginx_user: "{{ deploy_user }}"
nginx_max_clients: 512
nginx_configs:
  gzip:
    - |
      gzip on;
      gzip_disable "msie6";
      gzip_vary on;
      gzip_proxied any;
      gzip_comp_level 6;
      gzip_buffers 16 8k;
      gzip_http_version 1.1;
      gzip_min_length 1000;
      gzip_types text/plain text/html text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript image/png image/gif image/jpeg image/x-icon image/bmp;
  upstream:
    - |
      upstream {{ deploy_app_name }}_webapp  {
        server {{ webapp_host }}:{{ webapp_port }};
        keepalive 64;
      }
    - |
      upstream {{ deploy_app_name }}_api  {
        server {{ gunicorn_bind }} fail_timeout=0;
      }

nginx_sites:
  boilerplate_webapp:
    - |
      listen 80;

      charset utf-8;
      server_tokens off;

      server_name {{ site_domain }};

      access_log {{ deploy_log_dir }}/nginx-access.log;
      error_log {{ deploy_log_dir }}/nginx-error.log;

      client_max_body_size 10M; # Max upload size

      location / {
        proxy_redirect off;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Host $http_host;
        proxy_set_header X-NginX-Proxy true;
        proxy_set_header Connection "";
        proxy_http_version 1.1;

        proxy_pass http://{{ deploy_app_name }}_webapp;
      }

  boilerplate_api:
    - |
      listen 80;

      charset utf-8;
      server_tokens off;

      server_name {{ api_domain }};

      access_log {{ deploy_log_dir }}/nginx-access.log;
      error_log {{ deploy_log_dir }}/nginx-error.log;

      client_max_body_size 10M; # Max upload size

      location {{ django_static_url }} {
          alias {{ django_static_root }};
          access_log off;
          expires max;
      }

      location / {
          proxy_read_timeout 300;
          proxy_connect_timeout 300;
          proxy_redirect off;

          proxy_set_header X-Forwarded-Proto $scheme;
          proxy_set_header Host $http_host;
          proxy_set_header X-Real-IP $remote_addr;

          proxy_pass http://{{ deploy_app_name }}_api;
      }

  boilerplate_flower:
    - |
      listen 80;
      server_name {{ flower_domain }};
      charset utf-8;

      auth_basic "Restricted";
      auth_basic_user_file auth_basic/flower;

      location / {
        proxy_pass http://{{ flower_host }}:{{ flower_port }};
        proxy_set_header Host $host;
        proxy_redirect off;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
      }

  boilerplate_tornado:
    - |
      listen 80;
      server_name {{ tornado_domain }};
      charset utf-8;

      location / {
        proxy_pass http://{{ tornado_host }}:{{ tornado_port }};
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
      }

  boilerplate_docs:
    - |
      listen 80;
      server_name {{ docs_domain }};
      charset utf-8;

      location / {
        proxy_pass http://{{ docs_host }}:{{ docs_port }};
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
      }

  # CSRF protect
  csrf_protect:
    - |
      listen 80 default_server;
      return 444;

nginx_remove_sites: [default]

nginx_auth_basic_files:
  flower:
   - boilerplate_flower:$apr1$aCfYFo4h$hUa79ExUZtO11S/4ttlJ/0 # boilerplate_flower:password , generated by : htpasswd -nb boilerplate_flower password
